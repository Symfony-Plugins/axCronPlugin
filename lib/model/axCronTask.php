<?php



/**
 * Skeleton subclass for representing a row from the 'axcron_task' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3-dev on:
 *
 * Mon Jun 28 10:38:23 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.plugins.axCronPlugin.lib.model
 */
class axCronTask extends BaseaxCronTask {
	/**
	 * This method returns the full command to be executed.
	 * @return string the command
	 **/
	public function getCommand() {
		$command = sfConfig::get('app_axcron_path_php', '/usr/bin/php') . ' symfony ';
		
		foreach ($this->getaxCronTaskParameters() as $parameter) {
			$command .= '--' . $parameter->getKey() . '=' . $parameter->getValue() . ' ';
		}
		
		$command .= '-- ' . $this->getName() . ' ';
		
		$command .= ' > /dev/null 2>&1 & echo $!';
		
		return $command;
	}
	
	/**
	 * Check if this task is already running
	 * @return boolean true if running, false if not running
	 */
	public function isRunning() {
		$count = axCronTaskLogQuery::create()
			->filterRunning()
			->count();
			
		return $count > 0;
	}
	
	public function getIsRunning() {
    	return $this->isRunning();
	}
	
	/**
	 * Check if this task has to be started
	 * @return boolean true or false
	 */
	public function hasToRun() {
		foreach ($this->getaxCronTaskSchedules() as $schedule) {
			if ($schedule->getNextDatetime() < new DateTime() && !$this->isRunning()) {
				return true;
			}
		}
		
		return false;
	}
	
	/**
	 * Get the latest timestamp from the logs
	 * @return datetime the latest run
	 */
	public function getLastRun() {
		return axCronTaskLogQuery::create()
			->filterByaxCronTask($this)
			->orderByEndedAt(Criteria::DESC)
			->findOneOrCreate()
			->getEndedAt(null);
	}
} // axCronTask
