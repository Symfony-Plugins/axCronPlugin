<?php



/**
 * Skeleton subclass for representing a row from the 'axcron_task_schedule' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3-dev on:
 *
 * Mon Jun 28 10:48:51 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.plugins.axCronPlugin.lib.model
 */
class axCronTaskSchedule extends BaseaxCronTaskSchedule {
	/**
	 * Returns the next scheduled date time
	 * @return DateTime the datetime of next start
	 */
	public function getNextDatetime() {
		$from = $this->getaxCronTask()->getLastRun();
		
		if ($from == null) {
			$from = new DateTime('1900-01-01');
		}
		
		// We are in a day fixed schedule
		if ($this->getDay() !== null) {
			// If the day of week off today equals to the from date, i can not use strtotime with next/last
			if ($this->getDay() == $from->format('w')) {
				$next_date = new DateTime();
				$next_date->setTime($this->getHours(), $this->getMinutes());
			} else {
				$next_date = new DateTime('last '.$this->getDayAsString());
				$next_date->setTime($this->getHours(), $this->getMinutes());
			}
			
			if ($next_date < $from) {
				$next_date = new DateTime('next '.$this->getDayAsString());
				$next_date->setTime($this->getHours(), $this->getMinutes());
			}
			
			return $next_date;
		} else { // We are in interval schedule
			// I only add the interval to the latest run
			return $from->add(new DateInterval('PT'.$this->getInterval().'M'));
		}
	}
	
	/**
	 * @return integer the hours to start at
	 */
	public function getHours() {
		if ($this->getStartAt()) {
			return intval($this->getStartAt(null)->format('G'));
		}
		
		return null;
	}
	
	/**
	 * @return integer the minutes to start at
	 */
	public function getMinutes() {
		if ($this->getStartAt()) {
			return intval($this->getStartAt(null)->format('i'));
		}
		
		return null;
	}
	
	/**
	 * @return string the week of day in string
	 */
	public function getDayAsString() {
		switch ($this->getDay()) {
			case 0:
				return 'Sunday';
			case 1:
				return 'Monday';
			case 2:
				return 'Tuesday';
			case 3:
				return 'Wednesday';
			case 4:
				return 'Thursday';
			case 5:
				return 'Friday';
			case 6:
				return 'Saturday';
		}
	}
} // axCronTaskSchedule
